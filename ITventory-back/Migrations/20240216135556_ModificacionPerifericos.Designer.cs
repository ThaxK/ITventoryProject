// <auto-generated />
using System;
using Itventory.web.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Itventory.web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240216135556_ModificacionPerifericos")]
    partial class ModificacionPerifericos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeOfficeSuite", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeSuitesId")
                        .HasColumnType("int");

                    b.HasKey("EmployeesId", "OfficeSuitesId");

                    b.HasIndex("OfficeSuitesId");

                    b.ToTable("EmployeeOfficeSuite");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Act", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.Property<int>("WorkStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkStationId");

                    b.ToTable("Acts");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Periféricos"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Licencias"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dispositivos"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Marcas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Procesadores de PC"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Procesadores de Telefonos"
                        });
                });

            modelBuilder.Entity("Itventory.web.Entidades.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AntivirusLicenseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<int?>("DeviceBrandId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DeviceTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("HardDiskDrive")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("SolidStateDrive")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.Property<int?>("WindowsLicenseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AntivirusLicenseId");

                    b.HasIndex("DeviceBrandId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("WindowsLicenseId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.Property<int>("WorkAreaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Itventory.web.Entidades.OfficeSuite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FinishDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OfficeSuites");
                });

            modelBuilder.Entity("Itventory.web.Entidades.OtherPeripheral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("OtherPeripherals");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Peripheral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PeripheralBrandId")
                        .HasColumnType("int");

                    b.Property<int>("PeripheralTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PeripheralBrandId");

                    b.HasIndex("PeripheralTypeId");

                    b.ToTable("Peripherals");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Itventory.web.Entidades.SoftwareLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProductKey")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("SoftwareLicenses");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3487),
                            IsDeleted = false,
                            Name = "Mouses",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3503)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3516),
                            IsDeleted = false,
                            Name = "Teclados",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3517)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3519),
                            IsDeleted = false,
                            Name = "Monitores",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3520)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3522),
                            IsDeleted = false,
                            Name = "Licencias de Windows",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3522)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3524),
                            IsDeleted = false,
                            Name = "Licencias de Antivirus",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3525)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3526),
                            IsDeleted = false,
                            Name = "Computadores",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3527)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3529),
                            IsDeleted = false,
                            Name = "SmartPhones",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3531),
                            IsDeleted = false,
                            Name = "HP",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3532)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3534),
                            IsDeleted = false,
                            Name = "Apple",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3535)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3536),
                            IsDeleted = false,
                            Name = "Lenovo",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3537)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3539),
                            IsDeleted = false,
                            Name = "Intel Core i7-11700K (8 Núcleos, 3.6 GHz Frecuencia Base)",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3540)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 5,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3541),
                            IsDeleted = false,
                            Name = "AMD Ryzen 7 5800X (8 núcleos, 3.8 GHz Frecuencia Base)",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3542)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3544),
                            IsDeleted = false,
                            Name = "Qualcomm Snapdragon",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3544)
                        });
                });

            modelBuilder.Entity("Itventory.web.Entidades.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("WorkAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3594),
                            IsDeleted = false,
                            Name = "Administración",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3595)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3596),
                            IsDeleted = false,
                            Name = "Gerencia",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3597)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3598),
                            IsDeleted = false,
                            Name = "It",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3598)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3599),
                            IsDeleted = false,
                            Name = "Proyectos Desarrollo Corporativo",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3600)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3601),
                            IsDeleted = false,
                            Name = "Servicios Especiales",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3602)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3603),
                            IsDeleted = false,
                            Name = "Fleet Managers",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3603)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3604),
                            IsDeleted = false,
                            Name = "Instalacion y Mantenimiento",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3605)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3606),
                            IsDeleted = false,
                            Name = "Centro de Control",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3606)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3607),
                            IsDeleted = false,
                            Name = "Ventas",
                            Status = "0",
                            UpdateAt = new DateTime(2024, 2, 16, 8, 55, 56, 291, DateTimeKind.Local).AddTicks(3608)
                        });
                });

            modelBuilder.Entity("Itventory.web.Entidades.WorkStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComputerDeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SmartPhoneDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ComputerDeviceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SmartPhoneDeviceId");

                    b.ToTable("WorkStations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OtherPeripheralWorkStation", b =>
                {
                    b.Property<int>("OtherPeripheralsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkStationsId")
                        .HasColumnType("int");

                    b.HasKey("OtherPeripheralsId", "WorkStationsId");

                    b.HasIndex("WorkStationsId");

                    b.ToTable("OtherPeripheralWorkStation");
                });

            modelBuilder.Entity("PeripheralWorkStation", b =>
                {
                    b.Property<int>("PeripheralsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkStationsId")
                        .HasColumnType("int");

                    b.HasKey("PeripheralsId", "WorkStationsId");

                    b.HasIndex("WorkStationsId");

                    b.ToTable("PeripheralWorkStation");
                });

            modelBuilder.Entity("EmployeeOfficeSuite", b =>
                {
                    b.HasOne("Itventory.web.Entidades.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.OfficeSuite", null)
                        .WithMany()
                        .HasForeignKey("OfficeSuitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Itventory.web.Entidades.Act", b =>
                {
                    b.HasOne("Itventory.web.Entidades.WorkStation", "WorkStation")
                        .WithMany("Acts")
                        .HasForeignKey("WorkStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkStation");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Device", b =>
                {
                    b.HasOne("Itventory.web.Entidades.SoftwareLicense", "AntivirusLicense")
                        .WithMany("AntivirusLicenses")
                        .HasForeignKey("AntivirusLicenseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Itventory.web.Entidades.Subcategory", "DeviceBrand")
                        .WithMany("DeviceBrands")
                        .HasForeignKey("DeviceBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.Subcategory", "DeviceType")
                        .WithMany("DeviceTypes")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.Subcategory", "Processor")
                        .WithMany("Processors")
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.SoftwareLicense", "WindowsLicense")
                        .WithMany("WindowsLicenses")
                        .HasForeignKey("WindowsLicenseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AntivirusLicense");

                    b.Navigation("DeviceBrand");

                    b.Navigation("DeviceType");

                    b.Navigation("Processor");

                    b.Navigation("WindowsLicense");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Employee", b =>
                {
                    b.HasOne("Itventory.web.Entidades.WorkArea", "WorkArea")
                        .WithMany("Employees")
                        .HasForeignKey("WorkAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkArea");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Peripheral", b =>
                {
                    b.HasOne("Itventory.web.Entidades.Subcategory", "PeripheralBrand")
                        .WithMany("PeripheralBrands")
                        .HasForeignKey("PeripheralBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.Subcategory", "PeripheralType")
                        .WithMany("PeripheralTypes")
                        .HasForeignKey("PeripheralTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PeripheralBrand");

                    b.Navigation("PeripheralType");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Product", b =>
                {
                    b.HasOne("Itventory.web.Entidades.Employee", "Employee")
                        .WithMany("Products")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Itventory.web.Entidades.SoftwareLicense", b =>
                {
                    b.HasOne("Itventory.web.Entidades.Subcategory", "Subcategory")
                        .WithMany("SoftwareLicenses")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Subcategory", b =>
                {
                    b.HasOne("Itventory.web.Entidades.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Itventory.web.Entidades.WorkStation", b =>
                {
                    b.HasOne("Itventory.web.Entidades.Device", "ComputerDevice")
                        .WithMany("ComputerDevices")
                        .HasForeignKey("ComputerDeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.Employee", "Employee")
                        .WithMany("WorkStations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.Device", "SmartPhoneDevice")
                        .WithMany("SmartPhoneDevices")
                        .HasForeignKey("SmartPhoneDeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ComputerDevice");

                    b.Navigation("Employee");

                    b.Navigation("SmartPhoneDevice");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OtherPeripheralWorkStation", b =>
                {
                    b.HasOne("Itventory.web.Entidades.OtherPeripheral", null)
                        .WithMany()
                        .HasForeignKey("OtherPeripheralsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.WorkStation", null)
                        .WithMany()
                        .HasForeignKey("WorkStationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeripheralWorkStation", b =>
                {
                    b.HasOne("Itventory.web.Entidades.Peripheral", null)
                        .WithMany()
                        .HasForeignKey("PeripheralsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itventory.web.Entidades.WorkStation", null)
                        .WithMany()
                        .HasForeignKey("WorkStationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Itventory.web.Entidades.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Device", b =>
                {
                    b.Navigation("ComputerDevices");

                    b.Navigation("SmartPhoneDevices");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Employee", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("WorkStations");
                });

            modelBuilder.Entity("Itventory.web.Entidades.SoftwareLicense", b =>
                {
                    b.Navigation("AntivirusLicenses");

                    b.Navigation("WindowsLicenses");
                });

            modelBuilder.Entity("Itventory.web.Entidades.Subcategory", b =>
                {
                    b.Navigation("DeviceBrands");

                    b.Navigation("DeviceTypes");

                    b.Navigation("PeripheralBrands");

                    b.Navigation("PeripheralTypes");

                    b.Navigation("Processors");

                    b.Navigation("SoftwareLicenses");
                });

            modelBuilder.Entity("Itventory.web.Entidades.WorkArea", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Itventory.web.Entidades.WorkStation", b =>
                {
                    b.Navigation("Acts");
                });
#pragma warning restore 612, 618
        }
    }
}
